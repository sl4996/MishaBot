# -*- coding: utf-8 -*-from openapi_client import openapifrom datetime import datetime, timedeltafrom pytz import timezone#the correct path to the library /opt/anaconda3/lib/python3.8/site-packages/openapi_client/__init__.py' #уже не нужно, до этого sublime text не мог найти библиотекуtoken = ''client = openapi.api_client(token)#create a dictionary of ticker: figi pairsticker_figi_dict = {} def make_order(figi, lots, operation, price):	"""Takes the following inputs and makes an posts a limit order	   figi: string	   lots: int	   operation: string Buy/Sell	   price: float	"""	order_response = client.orders.orders_limit_order_post(figi=figi,																limit_order_request={"lots": lots,																				"operation": operation,																				"price": price})	return order_responsedef search_instrument_by_ticker(ticker):	"""Takes a ticker as an input and returns the figi associated with this ticker 	"""	#if ticker is not in the dictionary, then add the ticker:figi pair to it	if ticker not in ticker_figi_dict:		instrument = client.market.market_search_by_ticker_get(ticker)		ticker_figi_dict[ticker] = instrument.payload.instruments[0].figi		#return the figi associated with the given ticker	return ticker_figi_dict[ticker]def print_24hr_operations():	"""Returns all operations completed today	"""	now = datetime.now(tz=timezone('Europe/Moscow'))	yesterday = now - timedelta(hours = 20)	ops = client.operations.operations_get(_from=yesterday.isoformat(), to=now.isoformat())	return ops.payload.operationsdef get_price(figi):	"""Takes figi as an input and returns the last price associated with this figi	"""	instrument = client.market.market_orderbook_get(figi,2)	price = instrument.payload.last_price	return pricedef get_portfolio():	return client.portfolio.portfolio_get().payload.positionsdef get_price_increment(ticker):	"""Takes a ticker as an input and returns the minimum price increment for that ticker	"""	instrument = client.market.market_search_by_ticker_get(ticker)	price_increment = instrument.payload.instruments[0].min_price_increment	return price_incrementdef get_orders():	"""Returns currently active orders	"""	return client.orders.orders_get()